// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/cfnetworkingaction"
	"code.cloudfoundry.org/cli/command/v6"
)

type FakeAddNetworkPolicyActor struct {
	AddNetworkPolicyStub        func(srcSpaceGUID string, srcAppName string, destSpaceGUID string, destAppName string, protocol string, startPort int, endPort int) (cfnetworkingaction.Warnings, error)
	addNetworkPolicyMutex       sync.RWMutex
	addNetworkPolicyArgsForCall []struct {
		srcSpaceGUID  string
		srcAppName    string
		destSpaceGUID string
		destAppName   string
		protocol      string
		startPort     int
		endPort       int
	}
	addNetworkPolicyReturns struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}
	addNetworkPolicyReturnsOnCall map[int]struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAddNetworkPolicyActor) AddNetworkPolicy(srcSpaceGUID string, srcAppName string, destSpaceGUID string, destAppName string, protocol string, startPort int, endPort int) (cfnetworkingaction.Warnings, error) {
	fake.addNetworkPolicyMutex.Lock()
	ret, specificReturn := fake.addNetworkPolicyReturnsOnCall[len(fake.addNetworkPolicyArgsForCall)]
	fake.addNetworkPolicyArgsForCall = append(fake.addNetworkPolicyArgsForCall, struct {
		srcSpaceGUID  string
		srcAppName    string
		destSpaceGUID string
		destAppName   string
		protocol      string
		startPort     int
		endPort       int
	}{srcSpaceGUID, srcAppName, destSpaceGUID, destAppName, protocol, startPort, endPort})
	fake.recordInvocation("AddNetworkPolicy", []interface{}{srcSpaceGUID, srcAppName, destSpaceGUID, destAppName, protocol, startPort, endPort})
	fake.addNetworkPolicyMutex.Unlock()
	if fake.AddNetworkPolicyStub != nil {
		return fake.AddNetworkPolicyStub(srcSpaceGUID, srcAppName, destSpaceGUID, destAppName, protocol, startPort, endPort)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addNetworkPolicyReturns.result1, fake.addNetworkPolicyReturns.result2
}

func (fake *FakeAddNetworkPolicyActor) AddNetworkPolicyCallCount() int {
	fake.addNetworkPolicyMutex.RLock()
	defer fake.addNetworkPolicyMutex.RUnlock()
	return len(fake.addNetworkPolicyArgsForCall)
}

func (fake *FakeAddNetworkPolicyActor) AddNetworkPolicyArgsForCall(i int) (string, string, string, string, string, int, int) {
	fake.addNetworkPolicyMutex.RLock()
	defer fake.addNetworkPolicyMutex.RUnlock()
	return fake.addNetworkPolicyArgsForCall[i].srcSpaceGUID, fake.addNetworkPolicyArgsForCall[i].srcAppName, fake.addNetworkPolicyArgsForCall[i].destSpaceGUID, fake.addNetworkPolicyArgsForCall[i].destAppName, fake.addNetworkPolicyArgsForCall[i].protocol, fake.addNetworkPolicyArgsForCall[i].startPort, fake.addNetworkPolicyArgsForCall[i].endPort
}

func (fake *FakeAddNetworkPolicyActor) AddNetworkPolicyReturns(result1 cfnetworkingaction.Warnings, result2 error) {
	fake.AddNetworkPolicyStub = nil
	fake.addNetworkPolicyReturns = struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeAddNetworkPolicyActor) AddNetworkPolicyReturnsOnCall(i int, result1 cfnetworkingaction.Warnings, result2 error) {
	fake.AddNetworkPolicyStub = nil
	if fake.addNetworkPolicyReturnsOnCall == nil {
		fake.addNetworkPolicyReturnsOnCall = make(map[int]struct {
			result1 cfnetworkingaction.Warnings
			result2 error
		})
	}
	fake.addNetworkPolicyReturnsOnCall[i] = struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeAddNetworkPolicyActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addNetworkPolicyMutex.RLock()
	defer fake.addNetworkPolicyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAddNetworkPolicyActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.AddNetworkPolicyActor = new(FakeAddNetworkPolicyActor)
