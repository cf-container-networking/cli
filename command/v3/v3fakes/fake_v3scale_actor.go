// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3ScaleActor struct {
	GetAppScaleSummaryByNameAndSpaceStub        func(name string, spaceGUID string) (v3action.AppScaleSummary, v3action.Warnings, error)
	getAppScaleSummaryByNameAndSpaceMutex       sync.RWMutex
	getAppScaleSummaryByNameAndSpaceArgsForCall []struct {
		name      string
		spaceGUID string
	}
	getAppScaleSummaryByNameAndSpaceReturns struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}
	getAppScaleSummaryByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}
	UpdateAppScaleStub        func(name string, spaceGUID string, numInstances int, memUsage int, diskUsage int) (v3action.AppScaleSummary, v3action.Warnings, error)
	updateAppScaleMutex       sync.RWMutex
	updateAppScaleArgsForCall []struct {
		name         string
		spaceGUID    string
		numInstances int
		memUsage     int
		diskUsage    int
	}
	updateAppScaleReturns struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}
	updateAppScaleReturnsOnCall map[int]struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3ScaleActor) GetAppScaleSummaryByNameAndSpace(name string, spaceGUID string) (v3action.AppScaleSummary, v3action.Warnings, error) {
	fake.getAppScaleSummaryByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getAppScaleSummaryByNameAndSpaceReturnsOnCall[len(fake.getAppScaleSummaryByNameAndSpaceArgsForCall)]
	fake.getAppScaleSummaryByNameAndSpaceArgsForCall = append(fake.getAppScaleSummaryByNameAndSpaceArgsForCall, struct {
		name      string
		spaceGUID string
	}{name, spaceGUID})
	fake.recordInvocation("GetAppScaleSummaryByNameAndSpace", []interface{}{name, spaceGUID})
	fake.getAppScaleSummaryByNameAndSpaceMutex.Unlock()
	if fake.GetAppScaleSummaryByNameAndSpaceStub != nil {
		return fake.GetAppScaleSummaryByNameAndSpaceStub(name, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getAppScaleSummaryByNameAndSpaceReturns.result1, fake.getAppScaleSummaryByNameAndSpaceReturns.result2, fake.getAppScaleSummaryByNameAndSpaceReturns.result3
}

func (fake *FakeV3ScaleActor) GetAppScaleSummaryByNameAndSpaceCallCount() int {
	fake.getAppScaleSummaryByNameAndSpaceMutex.RLock()
	defer fake.getAppScaleSummaryByNameAndSpaceMutex.RUnlock()
	return len(fake.getAppScaleSummaryByNameAndSpaceArgsForCall)
}

func (fake *FakeV3ScaleActor) GetAppScaleSummaryByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getAppScaleSummaryByNameAndSpaceMutex.RLock()
	defer fake.getAppScaleSummaryByNameAndSpaceMutex.RUnlock()
	return fake.getAppScaleSummaryByNameAndSpaceArgsForCall[i].name, fake.getAppScaleSummaryByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeV3ScaleActor) GetAppScaleSummaryByNameAndSpaceReturns(result1 v3action.AppScaleSummary, result2 v3action.Warnings, result3 error) {
	fake.GetAppScaleSummaryByNameAndSpaceStub = nil
	fake.getAppScaleSummaryByNameAndSpaceReturns = struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) GetAppScaleSummaryByNameAndSpaceReturnsOnCall(i int, result1 v3action.AppScaleSummary, result2 v3action.Warnings, result3 error) {
	fake.GetAppScaleSummaryByNameAndSpaceStub = nil
	if fake.getAppScaleSummaryByNameAndSpaceReturnsOnCall == nil {
		fake.getAppScaleSummaryByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.AppScaleSummary
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getAppScaleSummaryByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) UpdateAppScale(name string, spaceGUID string, numInstances int, memUsage int, diskUsage int) (v3action.AppScaleSummary, v3action.Warnings, error) {
	fake.updateAppScaleMutex.Lock()
	ret, specificReturn := fake.updateAppScaleReturnsOnCall[len(fake.updateAppScaleArgsForCall)]
	fake.updateAppScaleArgsForCall = append(fake.updateAppScaleArgsForCall, struct {
		name         string
		spaceGUID    string
		numInstances int
		memUsage     int
		diskUsage    int
	}{name, spaceGUID, numInstances, memUsage, diskUsage})
	fake.recordInvocation("UpdateAppScale", []interface{}{name, spaceGUID, numInstances, memUsage, diskUsage})
	fake.updateAppScaleMutex.Unlock()
	if fake.UpdateAppScaleStub != nil {
		return fake.UpdateAppScaleStub(name, spaceGUID, numInstances, memUsage, diskUsage)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.updateAppScaleReturns.result1, fake.updateAppScaleReturns.result2, fake.updateAppScaleReturns.result3
}

func (fake *FakeV3ScaleActor) UpdateAppScaleCallCount() int {
	fake.updateAppScaleMutex.RLock()
	defer fake.updateAppScaleMutex.RUnlock()
	return len(fake.updateAppScaleArgsForCall)
}

func (fake *FakeV3ScaleActor) UpdateAppScaleArgsForCall(i int) (string, string, int, int, int) {
	fake.updateAppScaleMutex.RLock()
	defer fake.updateAppScaleMutex.RUnlock()
	return fake.updateAppScaleArgsForCall[i].name, fake.updateAppScaleArgsForCall[i].spaceGUID, fake.updateAppScaleArgsForCall[i].numInstances, fake.updateAppScaleArgsForCall[i].memUsage, fake.updateAppScaleArgsForCall[i].diskUsage
}

func (fake *FakeV3ScaleActor) UpdateAppScaleReturns(result1 v3action.AppScaleSummary, result2 v3action.Warnings, result3 error) {
	fake.UpdateAppScaleStub = nil
	fake.updateAppScaleReturns = struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) UpdateAppScaleReturnsOnCall(i int, result1 v3action.AppScaleSummary, result2 v3action.Warnings, result3 error) {
	fake.UpdateAppScaleStub = nil
	if fake.updateAppScaleReturnsOnCall == nil {
		fake.updateAppScaleReturnsOnCall = make(map[int]struct {
			result1 v3action.AppScaleSummary
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.updateAppScaleReturnsOnCall[i] = struct {
		result1 v3action.AppScaleSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppScaleSummaryByNameAndSpaceMutex.RLock()
	defer fake.getAppScaleSummaryByNameAndSpaceMutex.RUnlock()
	fake.updateAppScaleMutex.RLock()
	defer fake.updateAppScaleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3ScaleActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3ScaleActor = new(FakeV3ScaleActor)
